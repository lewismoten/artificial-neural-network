{"version":3,"sources":["heavside-step.js","hyperbolic-tangent.js","sigmoid.js","softmax.js"],"names":["id","dependencyNames","instantiate","getThis","key","this","isCommonJs","module","exports","isAmd","define","amd","that","dependencies","map","require","apply","result","call","arguments","_dependencies","undefined","heavsideStep","x","hyperbolicTangent","y","Math","exp","sigmoid","t","useDerivative","n","pow","E","softmax","values","checkValue","length","exponents","total","reduce","sum","divide","augend","addend","dividend","value","invalidArgumentMessage","Infinity","Number","MAX_VALUE","JSON","stringify"],"mappings":"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","file":"index.js","sourcesContent":["(\r\n  /**\r\n   * Register a module for CommonJS, AMD, and the global namespace.\r\n   *\r\n   * @param  {string} id                The identity of the module\r\n   * @param  {string[]} dependencyNames List of dependency names\r\n   * @param  {function} instantiate       Factory method to get the module\r\n   * @return {undefined}\r\n   */\r\n  function registerModule(id, dependencyNames, instantiate) {\r\n\r\n  'use strict';\r\n\r\n  let that = this;\r\n\r\n  if (isCommonJs()) {\r\n\r\n    let dependencies = dependencyNames.map(require);\r\n    exports = module.exports = that[id] = instantiate.apply(null, dependencies);\r\n\r\n  } else if (isAmd()) {\r\n\r\n    define(id, dependencyNames, function factory() {\r\n\r\n      let result = that[id] = instantiate.call(null, arguments);\r\n      return result;\r\n\r\n    });\r\n\r\n  } else {\r\n\r\n    let dependencies = dependencyNames.map(getThis, that);\r\n    that[id] = instantiate.apply(null, dependencies);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of an objects key\r\n   *\r\n   ** @this {object}       The source\r\n   * @param  {string} key The key\r\n   * @return {*}          The objects key value\r\n   */\r\n  function getThis(key) {\r\n\r\n    return this[key];\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment appears to be CommonJS\r\n   *\r\n   * @return {boolean}  True if environment is CommonJS, otherwise false\r\n   */\r\n  function isCommonJs() {\r\n\r\n    return typeof module !== 'undefined' &&\r\n      typeof module.exports !== 'undefined';\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment supports Asynchronous module definition (AMD)\r\n   *\r\n   * @return {boolean}  True if environment supports AMD, otherwise false\r\n   */\r\n  function isAmd() {\r\n\r\n    return typeof define === 'function' && define.amd;\r\n\r\n  }\r\n\r\n}.call(this, 'heavsideStep', [], function instantiate() {\r\n\r\n  'use strict';\r\n\r\n  return heavsideStep;\r\n\r\n  /**\r\n  Heavside Step\r\n  @param {number} x The value to be evaluated\r\n  @returns {number} 0 if signed; 1 if unsigned, otherwise 0.5\r\n  */\r\n  function heavsideStep(x) {\r\n\r\n    let result = x < 0 ? 0 : 1;\r\n\r\n    if (x === 0) {\r\n\r\n      result = 0.5;\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n}));\r\n","(\r\n  /**\r\n   * Register a module for CommonJS, AMD, and the global namespace.\r\n   *\r\n   * @param  {string} id                The identity of the module\r\n   * @param  {string[]} dependencyNames List of dependency names\r\n   * @param  {function} instantiate       Factory method to get the module\r\n   * @return {undefined}\r\n   */\r\n  function registerModule(id, dependencyNames, instantiate) {\r\n\r\n  'use strict';\r\n\r\n  let that = this;\r\n\r\n  if (isCommonJs()) {\r\n\r\n    let dependencies = dependencyNames.map(require);\r\n    exports = module.exports = that[id] = instantiate.apply(null, dependencies);\r\n\r\n  } else if (isAmd()) {\r\n\r\n    define(id, dependencyNames, function factory() {\r\n\r\n      let result = that[id] = instantiate.call(null, arguments);\r\n      return result;\r\n\r\n    });\r\n\r\n  } else {\r\n\r\n    let dependencies = dependencyNames.map(getThis, that);\r\n    that[id] = instantiate.apply(null, dependencies);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of an objects key\r\n   *\r\n   ** @this {object}       The source\r\n   * @param  {string} key The key\r\n   * @return {*}          The objects key value\r\n   */\r\n  function getThis(key) {\r\n\r\n    return this[key];\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment appears to be CommonJS\r\n   *\r\n   * @return {boolean}  True if environment is CommonJS, otherwise false\r\n   */\r\n  function isCommonJs() {\r\n\r\n    return typeof module !== 'undefined' &&\r\n      typeof module.exports !== 'undefined';\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment supports Asynchronous module definition (AMD)\r\n   *\r\n   * @return {boolean}  True if environment supports AMD, otherwise false\r\n   */\r\n  function isAmd() {\r\n\r\n    return typeof define === 'function' && define.amd;\r\n\r\n  }\r\n\r\n}.call(this, 'hyperbolicTangent', [], function instantiate() {\r\n\r\n  'use strict';\r\n\r\n  return hyperbolicTangent;\r\n\r\n  /**\r\n  Hyperbolic Tangent\r\n  @param {number} x The value - ideally between -10 and 10.\r\n  @returns {number} A value between 0 and 1.\r\n  */\r\n  function hyperbolicTangent(x) {\r\n\r\n    let y = Math.exp(2 * x);\r\n    return (y - 1) / (y + 1);\r\n\r\n  }\r\n\r\n}));\r\n","(\r\n  /**\r\n   * Register a module for CommonJS, AMD, and the global namespace.\r\n   *\r\n   * @param  {string} id                The identity of the module\r\n   * @param  {string[]} dependencyNames List of dependency names\r\n   * @param  {function} instantiate       Factory method to get the module\r\n   * @return {undefined}\r\n   */\r\n  function registerModule(id, dependencyNames, instantiate) {\r\n\r\n  'use strict';\r\n\r\n  let that = this;\r\n\r\n  if (isCommonJs()) {\r\n\r\n    let dependencies = dependencyNames.map(require);\r\n    exports = module.exports = that[id] = instantiate.apply(null, dependencies);\r\n\r\n  } else if (isAmd()) {\r\n\r\n    define(id, dependencyNames, function factory() {\r\n\r\n      let result = that[id] = instantiate.call(null, arguments);\r\n      return result;\r\n\r\n    });\r\n\r\n  } else {\r\n\r\n    let dependencies = dependencyNames.map(getThis, that);\r\n    that[id] = instantiate.apply(null, dependencies);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of an objects key\r\n   *\r\n   ** @this {object}       The source\r\n   * @param  {string} key The key\r\n   * @return {*}          The objects key value\r\n   */\r\n  function getThis(key) {\r\n\r\n    return this[key];\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment appears to be CommonJS\r\n   *\r\n   * @return {boolean}  True if environment is CommonJS, otherwise false\r\n   */\r\n  function isCommonJs() {\r\n\r\n    return typeof module !== 'undefined' &&\r\n      typeof module.exports !== 'undefined';\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment supports Asynchronous module definition (AMD)\r\n   *\r\n   * @return {boolean}  True if environment supports AMD, otherwise false\r\n   */\r\n  function isAmd() {\r\n\r\n    return typeof define === 'function' && define.amd;\r\n\r\n  }\r\n\r\n}.call(this, 'sigmoid', [], function instantiate() {\r\n\r\n  'use strict';\r\n\r\n  return sigmoid;\r\n\r\n  /**\r\n  Sigmoid Function\r\n  @param {number} t A value capped between -10 and 10.\r\n  (11 will give the same result as 10)\r\n  @param {boolean} [useDerivative] Use the derivative\r\n  @returns {number} A value between 0 and 1.\r\n  */\r\n  function sigmoid(t, useDerivative) {\r\n\r\n    if (useDerivative) {\r\n\r\n      const n = sigmoid(t);\r\n      return n * (1 - n);\r\n\r\n    }\r\n\r\n    return 1 / (1 + Math.pow(Math.E, -t));\r\n\r\n  }\r\n\r\n}));\r\n","(\r\n  /**\r\n   * Register a module for CommonJS, AMD, and the global namespace.\r\n   *\r\n   * @param  {string} id                The identity of the module\r\n   * @param  {string[]} dependencyNames List of dependency names\r\n   * @param  {function} instantiate       Factory method to get the module\r\n   * @return {undefined}\r\n   */\r\n  function registerModule(id, dependencyNames, instantiate) {\r\n\r\n  'use strict';\r\n\r\n  let that = this;\r\n\r\n  if (isCommonJs()) {\r\n\r\n    let dependencies = dependencyNames.map(require);\r\n    exports = module.exports = that[id] = instantiate.apply(null, dependencies);\r\n\r\n  } else if (isAmd()) {\r\n\r\n    define(id, dependencyNames, function factory() {\r\n\r\n      let result = that[id] = instantiate.call(null, arguments);\r\n      return result;\r\n\r\n    });\r\n\r\n  } else {\r\n\r\n    let dependencies = dependencyNames.map(getThis, that);\r\n    that[id] = instantiate.apply(null, dependencies);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of an objects key\r\n   *\r\n   ** @this {object}       The source\r\n   * @param  {string} key The key\r\n   * @return {*}          The objects key value\r\n   */\r\n  function getThis(key) {\r\n\r\n    return this[key];\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment appears to be CommonJS\r\n   *\r\n   * @return {boolean}  True if environment is CommonJS, otherwise false\r\n   */\r\n  function isCommonJs() {\r\n\r\n    return typeof module !== 'undefined' &&\r\n      typeof module.exports !== 'undefined';\r\n\r\n  }\r\n\r\n  /**\r\n   * Determines if the environment supports Asynchronous module definition (AMD)\r\n   *\r\n   * @return {boolean}  True if environment supports AMD, otherwise false\r\n   */\r\n  function isAmd() {\r\n\r\n    return typeof define === 'function' && define.amd;\r\n\r\n  }\r\n\r\n}.call(this, 'softmax', [], function instantiate() {\r\n\r\n  'use strict';\r\n\r\n  return softmax;\r\n\r\n  /**\r\n  Softmax\r\n  @param {number[]} values A list of numbers ranging from -10 to 10\r\n  @returns {number[]} The normalized list of entries between 0 and 1\r\n  where the sum is 1.\r\n  */\r\n  function softmax(values) {\r\n\r\n    values.map(checkValue);\r\n\r\n    if (values.length === 1) {\r\n\r\n      return [1];\r\n\r\n    }\r\n\r\n    const exponents = values.map(Math.exp),\r\n      total = exponents.reduce(sum, 0);\r\n\r\n    return exponents.map(divide, total);\r\n\r\n  }\r\n\r\n  /**\r\n  Sum\r\n  @param {number} augend The number to whcih an addend is added.\r\n  @param {number} addend A number that is added to another.\r\n  @returns {number} The sum\r\n  */\r\n  function sum(augend, addend) {\r\n\r\n    return augend + addend;\r\n\r\n  }\r\n\r\n\r\n  // eslint-disable-next-line valid-jsdoc\r\n  /**\r\n  Divide\r\n  @this {number} The divisor\r\n  @param {number} dividend The number to be divided\r\n  @returns {number} The quotient\r\n  */\r\n  function divide(dividend) {\r\n\r\n    return dividend / this;\r\n\r\n  }\r\n\r\n  /**\r\n  Checks the value to determine if it is valid\r\n  @param {*} value The value\r\n  @throws {invalidArgumentMessage} The value must be a number in-range\r\n  @returns {undefined}\r\n  */\r\n  function checkValue(value) {\r\n\r\n    if (typeof value !== 'number') {\r\n\r\n      throw invalidArgumentMessage(value);\r\n\r\n    }\r\n\r\n    switch (value) {\r\n\r\n      case Infinity:\r\n      case -Infinity:\r\n      case Number.MAX_VALUE:\r\n      case -Number.MAX_VALUE:\r\n        throw invalidArgumentMessage(value);\r\n\r\n      default:\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  An invalid argument message\r\n  @param {*} value The value of the argument\r\n  @returns {string} The message indicating that the value is invalid.\r\n  */\r\n  function invalidArgumentMessage(value) {\r\n\r\n    return `Invalid argument specified: ${JSON.stringify(value)}`;\r\n\r\n  }\r\n\r\n}));\r\n"]}